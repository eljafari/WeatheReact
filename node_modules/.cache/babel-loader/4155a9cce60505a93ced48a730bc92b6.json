{"ast":null,"code":"var _jsxFileName = \"/Users/elhamjafari/Desktop/CICCCProjects/m2NewTeacher/react/weatherforecast/weatherforecast/src/components/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { ThemeContext } from '../../contexts/context';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  const uriEncodedCity = encodeURIComponent(city);\n  let [responseObj, setResponseObj] = useState({});\n  const Theme = useContext(ThemeContext);\n\n  function getForecast(e) {\n    e.preventDefault();\n    fetch(`https://api.openweathermap.org/data/2.5/weather?units=${unit}&q=${uriEncodedCity}&appid=b616e8f9b0f5ea6e4561ed1d32ac9fc8`).then(response => response.json()).then(response => {\n      setResponseObj(response);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"WeatherInfo\",\n    style: Theme,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        className: classes.TextInput,\n        value: city,\n        onChange: e => setCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: classes.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: classes.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), \"Celcius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Conditions, {\n      responseObj: responseObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 8\n  }, this);\n};\n\n_s(Forecast, \"jHiFcpXLAOZqU7bW7Qlw2reKHxw=\");\n\n_c = Forecast;\nexport default Forecast; // const [lat, setLat] = useState([]);\n//     const [long, setLong] = useState([]);\n//     const [data, setData] = useState([]);\n//     useEffect(() => {\n//         const fetchData =  () => {\n//           navigator.geolocation.getCurrentPosition(function(position) {\n//             setLat(position.coords.latitude);\n//             setLong(position.coords.longitude);\n//           });\n//             fetch(`https://api.openweathermap.org/data/2.5/weather/?lat=${lat}&lon=${long}&units=${unit}&appid=b616e8f9b0f5ea6e4561ed1d32ac9fc8`)\n//             .then(res => res.json())\n//             .then(result => {\n//                 setData(result)\n//             });\n//             }\n//             fetchData();\n//         }, [lat,long])\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/elhamjafari/Desktop/CICCCProjects/m2NewTeacher/react/weatherforecast/weatherforecast/src/components/Forecast/Forecast.js"],"names":["React","useContext","useState","ThemeContext","Conditions","classes","Forecast","city","setCity","unit","setUnit","uriEncodedCity","encodeURIComponent","responseObj","setResponseObj","Theme","getForecast","e","preventDefault","fetch","then","response","json","TextInput","target","value","Radio","Button"],"mappings":"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","sourcesContent":["import React, {useContext, useState } from 'react';\nimport { ThemeContext } from '../../contexts/context';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css';\n\n\n\nconst Forecast = () => {\n\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    const uriEncodedCity = encodeURIComponent(city);\n    let [responseObj, setResponseObj] = useState({});\n    const Theme= useContext(ThemeContext);\n\n\n    function getForecast(e) {\n        e.preventDefault();\n       fetch(`https://api.openweathermap.org/data/2.5/weather?units=${unit}&q=${uriEncodedCity}&appid=b616e8f9b0f5ea6e4561ed1d32ac9fc8`)\n       .then(response => response.json())\n       .then(response => {\n           setResponseObj(response)\n       })\n   }\n\n   return (\n       <div className='WeatherInfo' style={Theme} >\n           <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.TextInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input \n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        \n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celcius\n                </label>\n\n                <button className={classes.Button} type=\"submit\">Get Forecast</button>\n\n            </form>\n            {/* {JSON.stringify(data)} */}\n           <Conditions\n               responseObj={responseObj}\n               />\n       </div>\n   )\n}\n\nexport default Forecast;\n\n\n\n\n\n\n\n\n\n// const [lat, setLat] = useState([]);\n//     const [long, setLong] = useState([]);\n//     const [data, setData] = useState([]);\n//     useEffect(() => {\n//         const fetchData =  () => {\n//           navigator.geolocation.getCurrentPosition(function(position) {\n//             setLat(position.coords.latitude);\n//             setLong(position.coords.longitude);\n//           });\n    \n//             fetch(`https://api.openweathermap.org/data/2.5/weather/?lat=${lat}&lon=${long}&units=${unit}&appid=b616e8f9b0f5ea6e4561ed1d32ac9fc8`)\n//             .then(res => res.json())\n//             .then(result => {\n//                 setData(result)\n//             });\n//             }\n//             fetchData();\n//         }, [lat,long])\n"]},"metadata":{},"sourceType":"module"}